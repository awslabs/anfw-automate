#!/usr/bin/env node
import 'source-map-support/register';
import * as cdk from 'aws-cdk-lib';
import { StackConfig, loadAppConfig } from '../../shared/lib/config_loader'
import { AwsSolutionsChecks, NagSuppressions } from "cdk-nag";
import { AppPipelineStack } from '../lib/app_pipeline_stack';

const app = new cdk.App()
cdk.Aspects.of(app).add(new AwsSolutionsChecks({ verbose: true }));

const STAGE = process.env.STAGE;
if (!STAGE) {
  console.error('Required STAGE environment variable is not defined');
  process.exit(1);
}

const vpcRegion = process.env.AWS_REGION
if (!vpcRegion) {
  console.error('Required AWS_REGION environment variable is not defined');
  process.exit(1);
}

const STACK_NAME = "app";
// let STACK_NAME = process.env.STACK_NAME;
// if (!STACK_NAME) {
//   console.log('STACK_NAME environment variable is not defined. Synthing/Deploying all stacks');
//   STACK_NAME = "all"
// }

// Load configuration
console.log(__dirname);
const loadedConfig: StackConfig | null = loadAppConfig(__dirname, STAGE, STACK_NAME);
const stage = loadedConfig?.stage
const globalConfig = loadedConfig?.globalConfig
const appConfig = loadedConfig?.appConfig
// const firewallConfig = loadedConfig?.fwConfig
// const vpcConfig = loadedConfig?.vpcConfig
const stacksetConfig = loadedConfig?.stacksetConfig

const namePrefix = `${(globalConfig as any).project?.aws_organziation_scope}-${(globalConfig as any).project?.project_name}-${(globalConfig as any).project.module_name}`

// if (STACK_NAME === 'vpc' || STACK_NAME === 'all') {
//   new VpcPipelineStack(app, `vpc-pipeline-anfw-${stage}`, {
//     stackName: `cpp-vpc-${namePrefix}-${stage}`,
//     env: {
//       region: (globalConfig as any).base?.primary_region || "",
//       account: (globalConfig as any).base?.resource_account_id || ""
//     },
//     namePrefix: namePrefix,
//     stage: stage,
//     config: vpcConfig,
//     globalConfig: globalConfig,
//   });
// }

// if (STACK_NAME === 'firewall' || STACK_NAME === 'all') {
//   new FirewallPipelineStack(app, `fw-pipeline-anfw-${stage}`, {
//     stackName: `cpp-fw-${namePrefix}-${stage}`,
//     env: {
//       region: (globalConfig as any).base?.primary_region || "",
//       account: (globalConfig as any).base?.resource_account_id || ""
//     },
//     namePrefix: namePrefix,
//     stage: stage,
//     config: firewallConfig,
//     globalConfig: globalConfig,
//   });
// }

if (STACK_NAME === 'app' || STACK_NAME === 'all') {
  new AppPipelineStack(app, `app-pipeline-anfw-${stage}`, {
    stackName: `cpp-app-${namePrefix}-${stage}`,
    env: {
      region: (globalConfig as any).base?.primary_region || "",
      account: (globalConfig as any).base?.resource_account_id || ""
    },
    namePrefix: namePrefix,
    stage: stage,
    stacksetConfig: stacksetConfig,
    config: appConfig,
    globalConfig: globalConfig,
  });
}

// Suppress CDK NAG findings for autogenerated support stacks
const exclusionList: string[] = [
  'Default/CrossRegionCodePipelineReplicationBucketEncryptionKey/Resource',
  'Default/CrossRegionCodePipelineReplicationBucket/Resource',
];

app.node.findAll().forEach(element => {
  if (exclusionList.some(ele => element.node.path.includes(ele))) {
    NagSuppressions.addResourceSuppressions(element, [{
      id: 'AwsSolutions-KMS5',
      reason: 'The Key is used for pipeline artifacts and need not be rotated.',
    }]);

    NagSuppressions.addResourceSuppressions(element, [{
      id: 'AwsSolutions-S1',
      reason: 'The Bucket is CDK managed and used for artifact storage',
    }]);

  }
});

app.synth();
